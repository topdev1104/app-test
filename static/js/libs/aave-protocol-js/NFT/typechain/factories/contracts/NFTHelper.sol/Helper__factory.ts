/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PromiseOrValue } from '../../../common';
import type { Helper, HelperInterface } from '../../../contracts/NFTHelper.sol/Helper';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address payable',
        name: '_target',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'fetchAllNft',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'tokenId',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'ownerOf',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'approved',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'uri',
            type: 'string',
          },
        ],
        internalType: 'struct helper.MarketItem[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'fetchMyNft',
    outputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'tokenId',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'ownerOf',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'approved',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'uri',
            type: 'string',
          },
        ],
        internalType: 'struct helper.MarketItem[]',
        name: '',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60806040523480156200001157600080fd5b506040516200107e3803806200107e8339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b610f54806200012a6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80639046c1641461003b5780639f7699eb14610059575b600080fd5b610043610077565b6040516100509190610b8f565b60405180910390f35b6100616103eb565b60405161006e9190610b8f565b60405180910390f35b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a8e5862d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010b9190610bf1565b905060008167ffffffffffffffff81111561012957610128610c1e565b5b60405190808252806020026020018201604052801561016257816020015b61014f61092c565b8152602001906001900390816101475790505b5090506000600190505b8281116103e25760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016101cf9190610c5c565b602060405180830381865afa1580156101ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102109190610ca3565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b815260040161026e9190610c5c565b602060405180830381865afa15801561028b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102af9190610ca3565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87b56dd856040518263ffffffff1660e01b815260040161030d9190610c5c565b600060405180830381865afa15801561032a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103539190610dc7565b905060405180608001604052808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815250856001866103b09190610e3f565b815181106103c1576103c0610e73565b5b602002602001018190525050505080806103da90610ea2565b91505061016c565b50809250505090565b606060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a8e5862d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190610bf1565b9050600080600190505b82811161057f573373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016105009190610c5c565b602060405180830381865afa15801561051d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105419190610ca3565b73ffffffffffffffffffffffffffffffffffffffff160361056c576001826105699190610eea565b91505b808061057790610ea2565b915050610489565b5060008167ffffffffffffffff81111561059c5761059b610c1e565b5b6040519080825280602002602001820160405280156105d557816020015b6105c261092c565b8152602001906001900390816105ba5790505b5090506000600190505b838111610922573373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b81526004016106569190610c5c565b602060405180830381865afa158015610673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106979190610ca3565b73ffffffffffffffffffffffffffffffffffffffff160361090f5760008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836040518263ffffffff1660e01b815260040161070e9190610c5c565b602060405180830381865afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190610ca3565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b81526004016107ad9190610c5c565b602060405180830381865afa1580156107ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ee9190610ca3565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87b56dd856040518263ffffffff1660e01b815260040161084c9190610c5c565b600060405180830381865afa158015610869573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108929190610dc7565b905060405180608001604052808581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815250856001866108ef9190610e3f565b81518110610900576108ff610e73565b5b60200260200101819052505050505b808061091a90610ea2565b9150506105df565b5080935050505090565b604051806080016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6109bf816109ac565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109f0826109c5565b9050919050565b610a00816109e5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a40578082015181840152602081019050610a25565b60008484015250505050565b6000601f19601f8301169050919050565b6000610a6882610a06565b610a728185610a11565b9350610a82818560208601610a22565b610a8b81610a4c565b840191505092915050565b6000608083016000830151610aae60008601826109b6565b506020830151610ac160208601826109f7565b506040830151610ad460408601826109f7565b5060608301518482036060860152610aec8282610a5d565b9150508091505092915050565b6000610b058383610a96565b905092915050565b6000602082019050919050565b6000610b2582610980565b610b2f818561098b565b935083602082028501610b418561099c565b8060005b85811015610b7d5784840389528151610b5e8582610af9565b9450610b6983610b0d565b925060208a01995050600181019050610b45565b50829750879550505050505092915050565b60006020820190508181036000830152610ba98184610b1a565b905092915050565b6000604051905090565b600080fd5b600080fd5b610bce816109ac565b8114610bd957600080fd5b50565b600081519050610beb81610bc5565b92915050565b600060208284031215610c0757610c06610bbb565b5b6000610c1584828501610bdc565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c56816109ac565b82525050565b6000602082019050610c716000830184610c4d565b92915050565b610c80816109e5565b8114610c8b57600080fd5b50565b600081519050610c9d81610c77565b92915050565b600060208284031215610cb957610cb8610bbb565b5b6000610cc784828501610c8e565b91505092915050565b600080fd5b600080fd5b610ce382610a4c565b810181811067ffffffffffffffff82111715610d0257610d01610c1e565b5b80604052505050565b6000610d15610bb1565b9050610d218282610cda565b919050565b600067ffffffffffffffff821115610d4157610d40610c1e565b5b610d4a82610a4c565b9050602081019050919050565b6000610d6a610d6584610d26565b610d0b565b905082815260208101848484011115610d8657610d85610cd5565b5b610d91848285610a22565b509392505050565b600082601f830112610dae57610dad610cd0565b5b8151610dbe848260208601610d57565b91505092915050565b600060208284031215610ddd57610ddc610bbb565b5b600082015167ffffffffffffffff811115610dfb57610dfa610bc0565b5b610e0784828501610d99565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e4a826109ac565b9150610e55836109ac565b9250828203905081811115610e6d57610e6c610e10565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ead826109ac565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610edf57610ede610e10565b5b600182019050919050565b6000610ef5826109ac565b9150610f00836109ac565b9250828201905080821115610f1857610f17610e10565b5b9291505056fea26469706673582212202822c10f77d639c79139d41978a746b2a89e266f7ac5e7cdf1c627ab1849705664736f6c63430008110033';

type HelperConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Helper__factory extends ContractFactory {
  constructor(...args: HelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Helper> {
    return super.deploy(_target, overrides || {}) as Promise<Helper>;
  }
  override getDeployTransaction(
    _target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_target, overrides || {});
  }
  override attach(address: string): Helper {
    return super.attach(address) as Helper;
  }
  override connect(signer: Signer): Helper__factory {
    return super.connect(signer) as Helper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HelperInterface {
    return new utils.Interface(_abi) as HelperInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Helper {
    return new Contract(address, _abi, signerOrProvider) as Helper;
  }
}
